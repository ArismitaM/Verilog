module fsm(sequence_in, clock, reset, out);

    input clock;
    input reset;
    input sequence_in;
    output reg out;

    reg [2:0] present_state, next_state;

    always @(posedge clock, posedge reset)
    begin
        if(reset==1) 
            present_state<=0;
        else
            present_state<=next_state;
    end

    always @(present_state,sequence_in)
    begin
        assign next_state[0]=sequence_in^present_state[1]^present_state[0];
        assign next_state[1]=((~present_state[1])&(~present_state[0]))|((~sequence_in)&present_state[1]);
    end
    
    always @(present_state)
    begin
        case(present_state) 
        0: out=0;
        1: out=0;
        2: out=0;
        3: out=1;
        default: out=0;
        endcase
    end
endmodule
